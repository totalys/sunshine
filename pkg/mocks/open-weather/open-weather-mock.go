// Code generated by mockery v2.34.2. DO NOT EDIT.

package openweather

import (
	mock "github.com/stretchr/testify/mock"
	openweather "github.com/totalys/sunshine/pkg/open-weather"
)

// WeatherOfficer is an autogenerated mock type for the WeatherOfficer type
type WeatherOfficer struct {
	mock.Mock
}

// GetWeather provides a mock function with given fields: lat, lng
func (_m *WeatherOfficer) GetWeather(lat float64, lng float64) (*openweather.WeatherInfo, error) {
	ret := _m.Called(lat, lng)

	var r0 *openweather.WeatherInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(float64, float64) (*openweather.WeatherInfo, error)); ok {
		return rf(lat, lng)
	}
	if rf, ok := ret.Get(0).(func(float64, float64) *openweather.WeatherInfo); ok {
		r0 = rf(lat, lng)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openweather.WeatherInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(float64, float64) error); ok {
		r1 = rf(lat, lng)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWeatherOfficer creates a new instance of WeatherOfficer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherOfficer(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeatherOfficer {
	mock := &WeatherOfficer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
