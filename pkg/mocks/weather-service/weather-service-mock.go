// Code generated by mockery v2.34.2. DO NOT EDIT.

package weatherservice

import (
	mock "github.com/stretchr/testify/mock"
	weather "github.com/totalys/sunshine/pkg/weather-service"
)

// WeatherService is an autogenerated mock type for the WeatherService type
type WeatherService struct {
	mock.Mock
}

// GetTemperatureForCity provides a mock function with given fields: city, country
func (_m *WeatherService) GetTemperatureForCity(city string, country string) (*weather.Info, error) {
	ret := _m.Called(city, country)

	var r0 *weather.Info
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*weather.Info, error)); ok {
		return rf(city, country)
	}
	if rf, ok := ret.Get(0).(func(string, string) *weather.Info); ok {
		r0 = rf(city, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*weather.Info)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(city, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWeatherService creates a new instance of WeatherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeatherService {
	mock := &WeatherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
