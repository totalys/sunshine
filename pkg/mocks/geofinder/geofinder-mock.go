// Code generated by mockery v2.34.2. DO NOT EDIT.

package geofinder

import mock "github.com/stretchr/testify/mock"

// GeoFinder is an autogenerated mock type for the GeoFinder type
type GeoFinder struct {
	mock.Mock
}

// FindLatLngByCity provides a mock function with given fields: city, country
func (_m *GeoFinder) FindLatLngByCity(city string, country string) (float64, float64, error) {
	ret := _m.Called(city, country)

	var r0 float64
	var r1 float64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (float64, float64, error)); ok {
		return rf(city, country)
	}
	if rf, ok := ret.Get(0).(func(string, string) float64); ok {
		r0 = rf(city, country)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string, string) float64); ok {
		r1 = rf(city, country)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(city, country)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewGeoFinder creates a new instance of GeoFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeoFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeoFinder {
	mock := &GeoFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
